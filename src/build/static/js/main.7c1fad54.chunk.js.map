{"version":3,"sources":["resume_pic_0627.PNG","Resume_TaekyoungKim_0627.pdf","pages/HomePage.js","pages/AboutPage.js","components/ProjectsList.js","pages/project-content.js","pages/ProjectsListPage.js","components/CommentsList.js","components/LikeSection.js","components/AddCommentForm.js","pages/NotFoundPage.js","pages/ProjectPage.js","NavBar.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","id","AboutPage","src","resume","alt","href","resumePDF","download","ProjectsList","projects","map","project","key","className","to","name","title","content","substring","outLink","ProjectsListPage","projectContent","CommentsList","comments","comment","text","username","LikeSection","projectName","like","setProjInfo","likeProject","a","fetch","method","result","json","body","onClick","AddCommentForm","useState","setUsername","commentText","setCommentText","addComment","JSON","stringify","headers","type","value","onChange","event","target","rows","cols","NotFoundPage","ProjectPage","match","params","find","projectInfo","useEffect","fetchData","otherProjects","filter","paragraph","NavBar","App","path","component","exact","Component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7c1fad54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/resume_pic_0627.23abed93.PNG\";","module.exports = __webpack_public_path__ + \"static/media/Resume_TaekyoungKim_0627.5659a3df.pdf\";","import React from 'react'\n//import {ExternalLink} from 'react-external-link';\n\nconst HomePage = () => (\n    //<React.Fragment></React.Fragment>\n    <>\n    <div>\n        <h2>Hello, Welcome to my page!</h2>\n        <p>This application uses React.js, Node.js, and MongoDB Atlas.</p>\n        <p>It introduces my resume and projects. At this point, I posted only 4 projects of mine and am planning to add the rest of the projects.</p>\n        <p>Most projects were originally created for the classes in Computer Science Post Bacc program at Oregon State University. </p>\n    </div>\n    <p></p>\n    <div id=\"resrc\">\n        <h4>Resources</h4>\n        <p>https://www.lynda.com</p><br></br>\n        <p>https://reactjs.org/docs/create-a-new-react-app.html</p>\n        <p>https://nodejs.org/en/docs/guides/getting-started-guide</p>\n        <p>https://docs.atlas.mongodb.com/getting-started</p>\n        {/*\n        <ExternalLink herf=\"https://www.lynda.com\" />\n        <ExternalLink herf=\"https://reactjs.org/docs/create-a-new-react-app.html\" />\n        <ExternalLink herf=\"https://nodejs.org/en/docs/guides/getting-started-guide/\" />\n        <ExternalLink herf=\"https://docs.atlas.mongodb.com/getting-started/\" /> */}\n        \n        \n    </div>\n    </>\n    \n);\n\nexport default HomePage;\n","import React from 'react';\nimport resume from '../resume_pic_0627.PNG';\nimport resumePDF from '../Resume_TaekyoungKim_0627.pdf';\n//import React, {useState} from 'react';\n//import { Document, Page } from 'react-pdf';\n\nconst AboutPage = () => (\n        <>\n        <h2>About me</h2>\n        <p>You can get some info about me from my resume below.</p>\n        \n        <img src={resume} alt=\"Resume\" />\n        <p>Also, you can download the resume in pdf file.</p>\n        <a href={resumePDF} download>\n            <button id=\"downloadbn\">Download PDF</button>\n        </a>\n        </>\n)\n    \n\n\nexport default AboutPage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst ProjectsList = ({ projects }) => (\n    <>\n    <div id=\"projList\">\n        {projects.map((project, key) => (\n            <Link className=\"project-list-item\" key={key} to={`/project/${project.name}`}>\n                <h3>{project.name}: {project.title}</h3>\n                <p>{project.content[0].substring(0, 100)}...</p>\n            </Link>    \n        ))}\n    </div>\n    </>\n);\n\n\nexport default ProjectsList;","const projects =[\n   {\n        name: 'project1',\n        title: 'Store Inventory Organization System',\n        content: [\n            `This application uses Python Flask on Google Cloud Platform. It has three entities: a shelf, a product, and a user.\n             When user open the webpage, it shows a user a URL link that leads the user to get token from Google using Google oauth2.`,\n            `It also stores the user info in the Google Datastore if the user is not in the user data. If the user is already in the user data, it just creates a new JWT and shows it.\n             After that, the user can test the application using Postman with those JWT.`,\n            `The product can be created by only authenticated users, but the shelf, which is a container for the products, can be created without authentication.\n             In addtion to the CRUD of both products and shelves, it allows to load or upload a product into a shelf.`\n        ],\n        outLink: 'https://github.com/tkim949/REST_API_GCP'\n    },\n    {\n        name: 'project2',\n        title: 'Customer Service Chatting Application',\n        content: [\n            `This application implements a simple chatting program between a server and a client sides using TCP protocol and socket API. `,\n            `The server-side program is written in Python and the client-side program is written in C. And it also uses multi-threading so the server can communicate \n            with many clients at the same time with a simple rule, which is a client can send a message while the server is waiting. `\n            \n        ],\n        outLink: 'https://github.com/tkim949/Networking/tree/master/project1'\n    },\n    {\n        name: 'project3',\n        title: 'File Encryption and Decryption Application with OTP',\n        content: [\n            `This application have two sides: a server and a client. Then, a server side can get a file and encrypts it with the generated One-Time-Pad key. Then it sends the encrypted file to a client.`,\n            `Now, the client side can decrypt the file that was sent by the server using the same OTP key and read it.`,\n            `This application uses network calls and multi-processing.`\n        ],\n        outLink: 'https://github.com/tkim949/Operating-System/tree/master/program4'\n    },\n    {\n        name: 'project4',\n        title: 'Adventure Game on Pointer-Linked Spaces',\n        content: [\n            `This program implements an adventure game that has several rooms in a house connected \n            with pointers and a user is exploring the house to find a USB that is hidden in one of rooms randomly set in the beginning. `,\n            `It also uses several components including creating different items that can affect the user’s properties/status, ending a game \n            when the user matches the condition such as out of health point, and displaying a map on the screen based on a user’s movement.`\n        ],\n        outLink:'https://github.com/tkim949/CS162_Project_final'\n    },\n];\n\nexport default projects;","import React from 'react';\n//import { Link } from 'react-router-dom';\nimport ProjectsList from '../components/ProjectsList';\nimport projectContent from './project-content';\n\nconst ProjectsListPage = () => (\n    //<React.Fragment></React.Fragment>\n    <>\n    <h2>Projects</h2>\n    <p></p>\n    <ProjectsList projects={projectContent} />\n   </>\n    \n);\n\nexport default ProjectsListPage;","import React from 'react';\n\nconst CommentsList = ({ comments }) => (\n    <>\n    <h3 id=\"cmtblock\">COMMENTS</h3>\n    {comments.map((comment, key) =>(\n        <div className=\"comment\" key={key}>       \n            <p>{comment.text}</p>\n            <h4>{comment.username}</h4>\n        </div>\n    ))}\n    </>\n);\n\nexport default CommentsList;","import React from 'react';\n\nconst LikeSection = ({ projectName, like, setProjInfo }) => {\n    const likeProject = async () => {\n        const result = await fetch(`/api/projects/${projectName}/like`, {\n            method: 'post',\n        });\n        const body = await result.json();\n        setProjInfo(body);\n    }\n    return (\n        <div id=\"like-section\">\n            <button onClick={() => likeProject()}>Add Like</button>\n            <p>This project got {like} likes</p>\n        </div>\n\n    );\n}\n\nexport default LikeSection;","import React, { useState } from 'react';\n\nconst AddCommentForm = ( { projectName, setProjInfo }) => {\n    const [username, setUsername] = useState('');\n    const [commentText, setCommentText] = useState('');\n\n    const addComment = async () => {\n        const result = await fetch(`/api/projects/${projectName}/add-comment`, {\n            method: 'post',\n            body: JSON.stringify({ username, text: commentText }),\n            headers: {\n                'Content-Type': 'application/json',\n            }\n        });\n        const body = await result.json();\n        setProjInfo(body);\n        setUsername('');\n        setCommentText('');\n    }\n\n    return (\n        <div id=\"add-comment-form\">\n            <h3>Add a Comment</h3>\n            <label>\n                Name:\n                <input type=\"text\" value={username} onChange={(event) => setUsername(event.target.value)} />\n            </label>\n            <label>\n                Comment:\n                <textarea rows=\"4\" cols=\"50\" value={commentText} onChange={(event) => setCommentText(event.target.value)} />\n            </label>\n            <button onClick={ () => addComment()}>SUBMIT</button>\n        </div>\n    );\n}\n\nexport default AddCommentForm;","import React from 'react';\n\nconst NotFoundPage = () => (\n    <h1>404: Page Not Found</h1>\n);\n\nexport default NotFoundPage;","import React, { useState, useEffect } from 'react';\nimport ProjectsList from '../components/ProjectsList';\nimport CommentsList from '../components/CommentsList';\nimport LikeSection from '../components/LikeSection';\nimport AddCommentForm from '../components/AddCommentForm';\nimport NotFoundPage from './NotFoundPage';\nimport projectContent from './project-content';\n\nconst ProjectPage = ({ match }) => {\n    //<React.Fragment></React.Fragment>\n    const name = match.params.name;\n    const project = projectContent.find(project => project.name === name);\n\n    //if (!project) return <h1>That project does not exist!</h1>\n    const [projectInfo, setProjInfo] = useState({ like: 0, comments: [] });\n\n    useEffect(() => {\n        const fetchData = async () => {\n           \n            const result = await fetch(`/api/projects/${name}`);\n            const body = await result.json();\n            //console.log(body);\n            setProjInfo(body);\n             \n        }\n        fetchData();\n    }, [name]);\n\n    if (!project) return <NotFoundPage />\n\n    const otherProjects = projectContent.filter(project => project.name !==name);\n\n    return (\n        <>\n        <div>\n            <h2>{project.name}: {project.title}</h2>\n            <LikeSection projectName={name} like={projectInfo.like} setProjInfo={setProjInfo} />\n            {project.content.map((paragraph, key) => (\n                <p key={key}>{paragraph}</p> \n            ))}\n            <br></br>\n            <a href={project.outLink}>Code Here</a>\n        </div>\n        <p></p>\n        <div>\n            <CommentsList comments={projectInfo.comments} />\n            <AddCommentForm projectName={name} setProjInfo={setProjInfo} />   \n        </div>\n        <p></p>\n        <div>\n            <h3 id=\"otherPro\">OTHER PROJECTS</h3>\n            <ProjectsList projects={otherProjects}/>  \n        </div>\n        </>\n    );\n}\n\nexport default ProjectPage;","import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst NavBar = () => (\n    <nav>\n        <ul>\n            <li>\n                <Link to=\"/\">Home</Link>    \n            </li>\n            <li>\n                <Link to=\"/about\">AboutMe</Link>    \n            </li>\n            <li>\n                <Link to=\"/projects-list\">Projects</Link>    \n            </li>\n        </ul>\n    </nav>\n);\n\nexport default NavBar;","import React, { Component } from 'react';\n\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from 'react-router-dom'; \n//import logo from './logo.svg';\nimport HomePage from './pages/HomePage'\nimport AboutPage from './pages/AboutPage'\nimport ProjectsListPage from './pages/ProjectsListPage'\nimport ProjectPage from './pages/ProjectPage'\nimport NotFoundPage from './pages/NotFoundPage'\nimport NavBar from './NavBar';\nimport './App.css';\n\nclass App extends Component {\n  render(){\n    return(\n      <Router>\n        <div className=\"App\">\n          <div id=\"headline\">\n            <h1>TK's Story</h1>\n            <NavBar />\n          </div>\n          <div id=\"page-body\">\n            <Switch>\n              <Route path=\"/\" component={HomePage} exact />\n              <Route path=\"/about\" component={AboutPage}  />\n              <Route path=\"/projects-list\" component={ProjectsListPage}  />\n              <Route path=\"/project/:name\" component={ProjectPage}  />\n              <Route component={NotFoundPage} />\n            </Switch>\n            \n          </div>\n          \n        </div>\n      </Router>\n      \n    );\n  }\n}\n\n/*\nclass App extends Component {\n  render(){\n  return (\n    <div className=\"App\">\n      <HomePage />\n    </div>\n  );\n  }\n}\n*/\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import 'whatwg-fetch';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  //<React.StrictMode>\n    <App />,\n  //</React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}